/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.*;
import Model.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

public class RegistrationOfBorrowingBookForm extends javax.swing.JFrame {

    /**
     * Creates new form DangKyMuonSach
     *
     */
    RegistrationBook_Controller controller;
    Borrower borrower;
    LentBook_Controller detail;

    public RegistrationOfBorrowingBookForm(Borrower borrower) throws ClassNotFoundException, SQLException {
        initComponents();
        setLocationRelativeTo(this);
        detail = new LentBook_Controller();
        controller = new RegistrationBook_Controller();
        this.borrower = borrower;

        putIntoTable(controller.searchBooks(""), tableBookSearching);
        setSelectedRow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBookSearching = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableChoosingList = new javax.swing.JTable();
        tfSearch = new javax.swing.JTextField();
        lbBookInformation = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnSendRequest = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableBookDetail = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuRegistrationOfBorrowingBook = new javax.swing.JMenu();
        mnuRegistrationOfBorrowingBookList = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableBookSearching.setAutoCreateRowSorter(true);
        tableBookSearching.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableBookSearching.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableBookSearching.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBookSearchingMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableBookSearching);

        tableChoosingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableChoosingList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(tableChoosingList);

        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchActionPerformed(evt);
            }
        });

        lbBookInformation.setText("Tìm kiếm sách");

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm >>>");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSendRequest.setText("Gửi yêu cầu");
        btnSendRequest.setActionCommand("Hủy");
        btnSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRequestActionPerformed(evt);
            }
        });

        btnCancel.setText("Thoát");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tableBookDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableBookDetail);

        mnuRegistrationOfBorrowingBook.setText("Đăng kí mượn sách");
        jMenuBar1.add(mnuRegistrationOfBorrowingBook);

        mnuRegistrationOfBorrowingBookList.setText("Danh sách sách đã đăng kí mượn ");
        mnuRegistrationOfBorrowingBookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuRegistrationOfBorrowingBookListMouseClicked(evt);
            }
        });
        jMenuBar1.add(mnuRegistrationOfBorrowingBookList);

        jMenu1.setText("Đăng xuất");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbBookInformation)
                        .addGap(18, 18, 18)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(btnSearch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSendRequest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbBookInformation))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane3))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(292, 292, 292))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Hàm này để đẩy thông tin sách vào bảng tìm kiếm sách
     */
    public void putIntoTable(ArrayList<Book> book, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnCount(0);
        model.setRowCount(0);
        model.addColumn("Mã sách");
        model.addColumn("Tiêu đề");
        model.addColumn("Tác giả");
        model.addColumn("Nhà xuất bản");
        // model.addColumn("Loai ban sao");
        // model.addColumn("So hieu ban sao");
        // model.addColumn("Trang thai");

        for (int i = 0; i < book.size(); i++) {

            // for (int j = 0; j < book.get(i).getListCoppyOfBook().size(); j++) {
            // CoppyOfBook coppyOfBook = book.get(i).getListCoppyOfBook().get(j);
            Vector vec = new Vector();
            vec.add(book.get(i).getbook_ID());
            vec.add(book.get(i).getbook_Title());
            vec.add(book.get(i).getbook_Author());
            vec.add(book.get(i).getbook_Publisher().getpublisher_Name());
            //vec.add(coppyOfBook.getTypeOfCoppy());
            // vec.add(coppyOfBook.getNumberOfCoopy());
            //  vec.add(coppyOfBook.getStatusOfCoppy());

            model.addRow(vec);
            // }
        }

    }

    public void setSelectedRow() throws ClassNotFoundException, SQLException {
        ListSelectionModel selectionModel = tableBookSearching.getSelectionModel();
        selectionModel.setSelectionInterval(0, 0);
         int i = tableBookSearching.getSelectedRow();

        // idBook;
            String idBook = tableBookSearching.getValueAt(i, tableBookSearching.getColumn("Mã sách").getModelIndex()).toString();

                putIntoDetailTable(Book_Controller.getInstance().getBookByIdBook(idBook), tableBookDetail);
    }

    public void putIntoDetailTable(Book book, JTable table) {

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setColumnCount(0);
        model.setRowCount(0);
        model.addColumn("Mã bản sao");
        model.addColumn("Loại bản sao");
        model.addColumn("Số hiệu bản sao");
        model.addColumn("Trạng thái");
        for (int j = 0; j < book.getbook_ListofCopy().size(); j++) {
            CopyOfBook coppyOfBook = book.getbook_ListofCopy().get(j);
            Vector vec = new Vector();
            vec.add(book.getbook_ListofCopy().get(j).getcopy_of_book_ID());

            vec.add(coppyOfBook.getcopy_of_book_Num_Of_Copy());

            String statusofCoppy = "";
            if (coppyOfBook.getcopy_of_book_Status().toString() == "AVAILABLE") {
                statusofCoppy = "Có sẵn";
            }
            if (coppyOfBook.getcopy_of_book_Status().toString() == "BORROWED") {
                statusofCoppy = "Đã được đăng ký";
            }
            if (coppyOfBook.getcopy_of_book_Status().toString() == "LENT") {
                statusofCoppy = "Đã mượn";
            }

            vec.add(statusofCoppy);

            model.addRow(vec);

        }
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        putIntoTable(controller.searchBooks(tfSearch.getText()), tableBookSearching);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchActionPerformed
    /*Hàm này để đẩy thông tin sách từ bảng tìm kiếm sách, sang bảng sách chọn để đăng ký
     */
    private void putIntoAddTable(String maSach, String tenSach, int soHieuBanSao, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        // System.out.println(+table.getColumnCount());
        if (table.getColumnCount() == 0) {
            model.setColumnCount(0);
            model.setRowCount(0);
            model.addColumn("Mã sách");
            model.addColumn("Tên sách");
            model.addColumn("Số hiệu bản sao");
        }
        Vector vec = new Vector();
        vec.add(maSach);
        vec.add(tenSach);
        vec.add(soHieuBanSao);
        model.addRow(vec);
    }

    /*Hàm này hiện ra thông báo về thao tác của người sử dụng
    
     */
    private void pushNotice(String content) {
        JOptionPane.showMessageDialog(null, content);

    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        checkConditionBtnAdd();

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
//        pushNotice("Cancel?");
//        try {
//            new RegistrationOfBorrowingBookForm().setVisible(true);
//        } catch (ParseException ex) {
//            Logger.getLogger(RegistrationOfBorrowingBookForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
        System.exit(0);

    }//GEN-LAST:event_btnCancelActionPerformed
    /*Hàm này để để kiểm tra dữ liệu để gửi yêu cầu có hợp lệ không
     */
    private void checkConditionBtnSendRequest() {
        String maThongTinMuonTra = "";
        try {
            // TODO add your handling code here:
            if (controller.checkRegistrationFromBorrower(borrower.getborrower_ID())) {
                pushNotice("Hủy đăng ký cũ trước khi đăng ký mới");
                return;
            }

            if (controller.checkBorrowingCard(controller.getBorrwer(borrower.getborrower_ID()))) {
                int numberOfRow = tableChoosingList.getRowCount();

                if (numberOfRow != 0) {
                    if (controller.checkNumberBook(borrower.getborrower_ID(), numberOfRow)) {

                        for (int i = 0; i < numberOfRow; i++) {
                            String maSach = tableChoosingList.getValueAt(i, tableChoosingList.getColumn("Mã sách").getModelIndex()).toString();

                            String soHieuBanSao = tableChoosingList.getValueAt(i, tableChoosingList.getColumn("Số hiệu bản sao").getModelIndex()).toString();

                            Book book = new Book();

                            if (i == 0) {
                                maThongTinMuonTra = controller.addInfoBorrowing(controller.getBorrwer(borrower.getborrower_ID()));
                            }
                            //  System.out.println(maSach.toString()+" "+ Integer.parseInt(soHieuBanSao.toString())+" " +maThongTinMuonTra);
                            detail.updateBorrowingInfomation(book.getBookByIdBook(maSach), Integer.parseInt(soHieuBanSao), maThongTinMuonTra);
                            controller.updateBookInfo(book.getBookByIdBook(maSach), Integer.parseInt(soHieuBanSao));

                        }
                        pushNotice("Thành công");
                    } else {
                        pushNotice("Quá số lượng được mượn");
                    }

                } else {
                    pushNotice("Chưa có sách nào được chọn");
                }
            } else {
                pushNotice("Thẻ hết hạn rồi");

            }
        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(RegistrationOfBorrowingBookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*Hàm này để để kiểm tra dữ liệu chuyển từ bảng tìm kiếm sang bảng chọn đăng ký đã tồn tại chưa
     */
    private boolean compareData(String str) {
        if (tableChoosingList.getRowCount() > 0) {
            Vector<String> idList = new Vector<>();
            for (int i = 0; i < tableChoosingList.getRowCount(); i++) {
                String maSach = tableChoosingList.getValueAt(i, tableChoosingList.getColumn("Mã sách").getModelIndex()).toString();
                idList.add(maSach);
            }
            return !idList.contains(str);
        }
        return true;
    }

    private void checkConditionBtnAdd() {
        if (tableBookSearching.getSelectedRow() != -1 && tableBookDetail.getSelectedRow() != -1) {
            String maSach = tableBookSearching.getValueAt(tableBookSearching.getSelectedRow(), tableBookSearching.getColumn("Mã sách").getModelIndex()).toString();
            String tenSach = tableBookSearching.getValueAt(tableBookSearching.getSelectedRow(), tableBookSearching.getColumn("Tiêu đề").getModelIndex()).toString();
            String loaiSach = tableBookDetail.getValueAt(tableBookDetail.getSelectedRow(), tableBookDetail.getColumn("Loại bản sao").getModelIndex()).toString();
            String soHieuBanSao = tableBookDetail.getValueAt(tableBookDetail.getSelectedRow(), tableBookDetail.getColumn("Số hiệu bản sao").getModelIndex()).toString();
            String trangThai = tableBookDetail.getValueAt(tableBookDetail.getSelectedRow(), tableBookDetail.getColumn("Trạng thái").getModelIndex()).toString();

            if (loaiSach == "Tài liệu tham khảo" || trangThai != "Có sẵn") {
                pushNotice("Không thể chọn");
            } else {
                try {
                    try {
                        if (controller.checkIdBook(borrower.getborrower_ID(), maSach)) {
                            if (compareData(maSach)) {
                                putIntoAddTable(maSach, tenSach, Integer.valueOf(soHieuBanSao), tableChoosingList);
                                // System.out.println(+tableChoosingList.getRowCount());
                                ((DefaultTableModel) tableBookSearching.getModel()).removeRow(tableBookSearching.getSelectedRow());
                                ((DefaultTableModel) tableBookDetail.getModel()).setColumnCount(0);
                                ((DefaultTableModel) tableBookDetail.getModel()).setRowCount(0);
                            } else {
                                pushNotice("Sách đã chọn rồi");
                            }
                        } else {
                            pushNotice("Sách đã mượn rồi");
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(RegistrationOfBorrowingBookForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(RegistrationOfBorrowingBookForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            pushNotice("Chọn cuốn sách muốn mượn");
        }
    }
    private void btnSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRequestActionPerformed
        checkConditionBtnSendRequest();
    }//GEN-LAST:event_btnSendRequestActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        if (chooseDialog("Bạn có chắc chắn muốn đăng xuất") == JOptionPane.YES_OPTION) {
            LoginForm loginForm = new LoginForm();
            loginForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jMenu1MouseClicked

    private void mnuRegistrationOfBorrowingBookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuRegistrationOfBorrowingBookListMouseClicked
        // TODO add your handling code here:
        CancellationOfBorrowingBookRegistrationForm registrationForm = new CancellationOfBorrowingBookRegistrationForm(borrower);
        registrationForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_mnuRegistrationOfBorrowingBookListMouseClicked

    private void tableBookSearchingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBookSearchingMouseClicked
        // TODO add your handling code here:
        int i = tableBookSearching.getSelectedRow();

        // idBook;
        if (i != -1) {
            String idBook = tableBookSearching.getValueAt(i, tableBookSearching.getColumn("Mã sách").getModelIndex()).toString();

            try {

                putIntoDetailTable(Book_Controller.getInstance().getBookByIdBook(idBook), tableBookDetail);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(RegistrationOfBorrowingBookForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tableBookSearchingMouseClicked

    private int chooseDialog(String title) {
        int i = JOptionPane.showConfirmDialog(null, title, "Thông báo", JOptionPane.YES_NO_OPTION);
        return i;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSendRequest;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbBookInformation;
    private javax.swing.JMenu mnuRegistrationOfBorrowingBook;
    private javax.swing.JMenu mnuRegistrationOfBorrowingBookList;
    private javax.swing.JTable tableBookDetail;
    private javax.swing.JTable tableBookSearching;
    private javax.swing.JTable tableChoosingList;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}

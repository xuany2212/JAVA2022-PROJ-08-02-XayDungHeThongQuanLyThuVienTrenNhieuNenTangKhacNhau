/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import View.*;
import Controller.*;
import Model.*;
import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

public class PublisherForm extends javax.swing.JFrame {

    AddNewBookForm addNewBookForm;
    ArrayList<Publisher> arrAvailablePublisher;

    /**
     * Creates new form PublisherForm
     */
    public PublisherForm(AddNewBookForm addNewBookForm) {
        initComponents();
        this.addNewBookForm = addNewBookForm;
        setLocationRelativeTo(this);
        try {
            arrAvailablePublisher = Publisher_Controller.getInstance().getListPublishers();
            innitTablePublisher(arrAvailablePublisher);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PublisherForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PublisherForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfNamePublisher = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePublisherAvailable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Tên nhà phát hành");

        tfNamePublisher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfNamePublisherKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfNamePublisherKeyTyped(evt);
            }
        });

        jButton1.setText("Hủy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tablePublisherAvailable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhà phát hành", "Tên nhà phát hành"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePublisherAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePublisherAvailableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePublisherAvailable);
        if (tablePublisherAvailable.getColumnModel().getColumnCount() > 0) {
            tablePublisherAvailable.getColumnModel().getColumn(0).setPreferredWidth(15);
            tablePublisherAvailable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        jButton2.setText("Ok");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(tfNamePublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfNamePublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addPublisher();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tfNamePublisherKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNamePublisherKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_BACK_SPACE:
                break;
            case KeyEvent.VK_ENTER:
                autoComplete(tfNamePublisher.getText());
                break;
            default:
                EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        String kt = tfNamePublisher.getText();
                        autoComplete(kt);
                    }
                });
        }
    }//GEN-LAST:event_tfNamePublisherKeyPressed

    private void tfNamePublisherKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNamePublisherKeyTyped
        if (tfNamePublisher.getText().isEmpty()) {
            innitTablePublisher(arrAvailablePublisher);
        }
        autoComplete(tfNamePublisher.getText());
    }//GEN-LAST:event_tfNamePublisherKeyTyped

    private void tablePublisherAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePublisherAvailableMouseClicked
        // TODO add your handling code here:
        int i = tablePublisherAvailable.getSelectedRow();
        if (i != -1) {
            tfNamePublisher.setText((String) tablePublisherAvailable.getValueAt(i, 1));
        }
    }//GEN-LAST:event_tablePublisherAvailableMouseClicked

    ArrayList<Publisher> arrPublisherOfTable;

    /**
     * Hàm này thực hiện chức năng hiển thị danh sách các nhà phát hành lên bảng
     *
     * @param ArrayList<Publisher> Danh sách các tác giả hiển thị lên list
     */
    private void innitTablePublisher(ArrayList<Publisher> publishers) {
        arrPublisherOfTable = publishers;
        DefaultTableModel model = (DefaultTableModel) tablePublisherAvailable.getModel();
        model.setRowCount(0);
        for (int i = 0; i < arrPublisherOfTable.size(); i++) {
            model.addRow(new Object[]{
                arrPublisherOfTable.get(i).getpublisher_ID(),
                arrPublisherOfTable.get(i).getpublisher_Name()
            });
        }
        tablePublisherAvailable.setModel(model);
    }

    /**
     * Hàm này thực hiện chức năng tìm các nhà phát hành có tên bắt đầu bằng một
     * chuỗi kí tự nào đó
     *
     * @param String chỗi kí tự bắt đầu của tên nhà phát hành
     */
    private void autoComplete(String kt) {
        String complete = "";
        int start = kt.length();
        int last = kt.length();
        int i;
        ArrayList<Publisher> arr = new ArrayList<>();
        for (i = 0; i < arrAvailablePublisher.size(); i++) {
            if (arrAvailablePublisher.get(i).getpublisher_Name().startsWith(kt)) {
                arr.add(arrAvailablePublisher.get(i));
            }
        }
        innitTablePublisher(arr);
    }

    /**
     * Hàm này thực hiện chức năng thêm nhà phát hành cho sách muốn thêm vào
     *
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private void addPublisher() {
        int i = tablePublisherAvailable.getSelectedRow();
        int idPublish = (i == -1) ? -1 : (int) tablePublisherAvailable.getValueAt(i, 0);
        String namePublish = tfNamePublisher.getText();
        addNewBookForm.publisher(new Publisher(idPublish, namePublish));
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePublisherAvailable;
    private javax.swing.JTextField tfNamePublisher;
    // End of variables declaration//GEN-END:variables
}
